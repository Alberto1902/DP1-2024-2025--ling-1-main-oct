Archivo: AchievementRestControllerTests.java
  setUp()
  testFindAllAchievements()
  testFindAchievementById()
  testCreateAchievement()
  testModifyAchievement()
  testDeleteAchievement()
Archivo: AchievementServiceTests.java
  shouldFindAllAchievements()
  shouldFindAchievementById()
  shouldReturnNullWhenAchievementNotFoundById()
  shouldSaveNewAchievement()
  shouldDeleteAchievementById()
  shouldEditAchievement()
Archivo: AchievementTest.java
  testEqualsAndHashCode()
  testEqualsAndHashCodeWithNullFields()
Archivo: AuthControllerTests.java
  setup()
  shouldAuthenticateUser()
  shouldValidateToken()
  shouldNotValidateToken()
  shouldRegisterUser()
  shouldNotRegisterUserWithExistingUsername()
Archivo: AuthServiceTests.java
  shouldCreateAdminUser()
  shouldCreatePlayerUser()
Archivo: CardServiceTest.java
  setUp()
  shouldFindCardById()
  shouldFindAllCards()
Archivo: ChatMessageControllerTest.java
  createChatMessageWithValidDataTest()
  createChatMessageWithoutCsrfTest()
  createChatMessageUnauthorizedTest()
Archivo: ChatRoomControllerTest.java
  createChatRoomWithoutCsrfTest()
  createChatRoomUnauthorizedTest()
Archivo: DeckControllerTest.java
  reshuffleShouldReturnBadRequestWhenGameSessionIsInvalid()
  takeOneCardShouldReturnBadRequestWhenGameSessionIsInvalid()
  shuffleDeckShouldReturnBadRequestWhenGameSessionIsInvalid()
  discardCardsShouldReturnBadRequestWhenPieceIsInvalid()
  initialCardsShouldReturnBadRequestWhenGameSessionIsInvalid()
  findDeckShouldReturnOkWhenIdIsProvided()
  findDeckShouldReturnOkWhenIdIsNotProvided()
  findDeckShouldReturnBadRequestWhenGameSessionIsInvalid()
Archivo: DeckServiceSolitaryTest.java
  setUp()
  updateExistingDeck()
  failToUpdateNonExistentDeck()
  findDeckByIdSuccessfully()
  findDeckByIdReturnsNullIfNotFound()
  shouldCreateDeckSuccessfully()
  shouldFailToCreateDuplicateDeck()
  shouldShuffleDeckSuccessfully()
  shouldTakeCardSuccessfully()
  shouldReshuffleDeckSuccessfully()
  shouldDiscardCardsSuccessfully()
  shouldDiscardCardToDeckSuccessfully()
  shouldGetInitialCardsSuccessfully()
Archivo: FightRestControllerTest.java
  startFightSuccessTest()
  startFightInvalidPositionTest()
Archivo: FightServiceTests.java
  setUpSpy()
  setUp()
  testFightThrowsExceptionWhenPiecesAreNotInSamePosition()
  testFightThrowsExceptionWhenPiecesAreInSafeArea()
  testSetWinnerWithInvalidPieceThrowsException()
  testSetWinnerWithValidPiece()
  testGetLoserWhenWinnerIsAttacker()
  testGetLoserWhenWinnerIsDefender()
  testGetLoserWhenNoWinner()
  testValidateFightConditions()
  testRollDiceGeneratesValidValue()
  testResetPieceStates()
  testAdjustDefenderStateAfterLoss()
  testAdjustAttackerStateAfterLoss()
  testHandleNpcVsPlayerWhenAttackerWins()
  testHandleNpcVsPlayerWhenDefenderWins()
  testHandlePlayerVsNpcWhenDefenderWins()
  testHandlePlayerVsNpcWhenAttackerWins()
  testHandleCampbellVsPlayerWhenAttackerWins()
  testHandleCampbellVsPlayerWhenDefenderWins()
  testHandlePlayerVsCampbellWhenDefenderWins()
  testHandlePlayerVsCampbellWhenAttackerWins()
  testHandlePlayerVsPlayerWhenDefenderWins()
  testHandlePlayerVsPlayerWhenAttackerWins()
  testResolveFightOutcomeWhenPlayerVsPlayer()
  testResolveFightOutcomeWhenPlayerVsCampbell()
  testResolveFightOutcomeWhenCampbellVsPlayer()
  testResolveFightOutcomeWhenPlayerVsNpc()
  testResolveFightOutcomeWhenNpcVsPlayer()
  testFightWhenAttackerWins()
  testFightWhenDefenderWins()
  testCountFightsWonByPiece()
  testCountFightsLostByPiece()
  testGetMostFoughtSquare()
Archivo: FriendshipControllerTest.java
  sendFriendshipRequestShouldReturnCreatedWhenValidRequest()
Archivo: FriendshipServiceTest.java
  setup()
  shouldCreateFriendship()
  shouldGetFriendshipsByUser()
  shouldAcceptFriendship()
  shouldRejectFriendship()
  shouldGetFriendshipRequestsForUser()
Archivo: GameSessionRestControllerSolitaryTest.java
  unfeasibleGameSessionCreationTest()
  feasibleGameSessionCreationTest()
  findGameSessionsWithParametersTest()
  findGameSessionsTest()
  joinGameSessionTest()
  changeGameSessionStatusTest()
Archivo: GameSessionServiceTests.java
  shouldFindAllGameSessions()
  shouldFindGameSessionById()
  shouldThrowExceptionWhenGameSessionNotFoundById()
  shouldCreateGameSession()
  shouldUpdateGameSession()
  shouldThrowExceptionWhenUpdatingNonexistentGameSession()
  shouldFindGameSessionsByStatus()
  shouldFindGameSessionsByCreator()
  shouldFindGameSessionsByCreatorAndStatus()
  shouldFailToCreatePrivateGameSessionWithoutPin()
  shouldFailToCreatePublicGameSessionWithPin()
  shouldCreatePrivateGameSessionWithPin()
  shouldCreatePublicGameSessionWithoutPin()
  shouldFailToCreateGameSessionWithLongPin()
  shouldFailToCreateGameSessionWithShortPin()
  shouldFailToJoinGameSessionWithInvalidPin()
  shouldFailToJoinFullGameSession()
  shouldFailToJoinFinishedGameSession()
  shouldFailToJoinInProgressGameSession()
  shouldFailToJoinPublicGameWithCode()
  shouldFailToJoinAgainGameSession()
  shouldJoinGameSession()
  shouldChangeGameSessionStatusToInProgress()
  shouldChangeGameSessionStatusToFinished()
  shouldFailToChangeStatus()
  shouldFailToChangeTurnInAWaitingGame()
  shouldFailToChangeTurnInAFinishedGame()
  shouldChangeTurn()
  shouldCorrectlyRetrieveShortestGameByUser()
  shouldNotRetrieveShortestGameByUser()
  shouldCorrectlyRetrieveLongestGameByUser()
  shouldNotRetrieveLongestGameByUser()
  shouldCorrectlyRetrieveAverageGameByUser()
  shouldNotRetrieveAverageGameByUser()
  shouldCorrectlyRetrieveSmallestGameByUser()
  shouldNotRetrieveSmallestGameByUser()
  shouldCorrectlyRetrieveBiggestGameByUser()
  shouldNotRetrieveBiggestGameByUser()
  shouldCorrectlyRetrieveAveragePlayersByUser()
  shouldNotRetrieveAveragePlayersByUser()
  shouldRetrieveTotalGamesByUser()
  shouldNotRetrieveTotalGamesByUser()
  shouldRetrieveTotalWinsByUser()
  shouldNotRetrieveTotalWinsByUser()
  shouldRetrieveShortestGame()
  shouldRetrieveLongestGame()
  shouldRetrieveAverageGame()
  shouldRetrieveAverageGameSize()
  shouldRetrieveMinutesPlayed()
  shouldRetrieveTotalGames()
  shouldRetrieveMinutesPlayedByUser()
  shouldFindTotalActiveGames()
Archivo: InvitationServiceTest.java
  shouldCreateInvitation()
  shouldFailCreateDuplicateInvitation()
  shouldFailCreateInvitationWithNonFriendSpectator()
  shouldFailCreateInvitationWithSenderNotInGame()
  shouldFailCreateInvitationIfNotFriends()
  shouldFailCreateInvitationWithReceiverInGame()
  shouldFailCreateInvitationWithFullGame()
  shouldFailCreateInvitationInNotWaiting()
  shouldAcceptInvitation()
  shouldFailAcceptInvitationNotPending()
  shouldRejectInvitation()
  shouldFailRejectInvitationNotPending()
  shouldFindInvitation()
  shouldReturnNullWhenInvitationNotFound()
  shouldGetPendingInvitations()
Archivo: AuthTokenFilterTests.java
  setUp()
  testDoFilterInternal_WithValidToken()
Archivo: JwtUtilsTests.java
  setUp()
  testGenerateTokenFromUsernameWithAuthority_Success()
  testGenerateTokenFromUsernameWithUserDetails_Success()
  testGetUserNameFromJwtToken_Success()
  testValidateJwtToken_Success()
  testValidateJwtToken_Expired()
  testValidateJwtToken_InvalidSignature()
  testValidateJwtToken_MalformedToken()
  testValidateJwtToken_EmptyToken()
  testValidateJwtToken_NullToken()
Archivo: ValidatorTests.java
  shouldNotValidateWhenFirstNameEmpty()
Archivo: PieceRestControllerTests.java
  setup()
  testCreateAllPieces()
  testMovePiece_Success()
  testMovePiece_PieceNotFound()
  testMovePiece_SquareNotFound()
  testGetPiecesByGameId_Success()
  testCreateAllPieces_Success()
  testInitialPositionNonPlayer_Success()
  testReceiveCard_Success()
  testReceiveInitialCards_Success()
  testReceiveInitialCards_PieceNotFound()
  testReceiveCardAfterFight_Success()
  testPutCardsInBag_Success()
  testDiscardCards_PieceNotFound()
  testEscape()
  testCatapulted()
  testFindPiecesInSquare()
  shouldSetWinnerCorrectly()
  shouldThrowExceptionWhenWinnerIsInvalid()
  shouldReturnCorrectLoser()
  testFighting()
  testAttacking()
  testDefending()
  testGetAttacker()
  testGetDefender()
  testStealFromPlayerHand()
  testStealFromPlayerBag()
  testDiscardAfterLosing()
Archivo: PieceServiceTest.java
  shouldFindPieceById()
  shouldReturnNullWhenPieceNotFound()
  shouldSaveNewPiece()
  shouldUpdatePiece()
  shouldFindPieceByUserIdAndGameId()
  shouldFindPiecesByGameId()
  shouldCreateAllPieces()
  shouldFailCreateAllPiecesNotInProgressGame()
  shouldMovePiece()
  shouldFailMovePieceNotEnoughActionPoints()
  shouldFailMovePieceNotActionPhase()
  shouldFailMovePieceNotYourTurn()
  shouldGetPossibleLaunches()
  shouldFailToGetPossibleLaunches()
  shouldSetInitialPosition()
  shouldSetNonPlayerInitialPosition()
  shouldReceiveCard()
  shouldFailReceiveCardInNotDrawPhase()
  shouldFailReceiveCardInFullHand()
  shouldReceiveInitialCards()
  shouldPutCardsInBag()
  shouldFailPutCardsInBagInNotBagPhase()
  shouldFailPutCardsInBagInFullHand()
  shouldFailPutFewCardsInBag()
  shouldDiscardCards()
  shouldFailDiscardCards()
  shouldDefineActionPoints()
  shouldFailEscapeWithInvalidWord()
  shouldBeCatapultedToNewSquare()
  shouldFindPiecesInSquare()
  shouldFailDefineActionPointsWhenNotYourTurn()
  shouldSetIsFighting()
  shouldSetPieceToAttacking()
  shouldSetPieceToDefending()
  shouldRetrieveAttacker()
  shouldReceiveCardAfterFight()
  shouldResetActionPoints()
  shouldStealFromHandSuccessfully()
  shouldStealFromBagSuccessfully()
  shouldDiscardCardFromHandAfterLosing()
  shouldDiscardCardFromBagAfterLosing()
  shouldHandleEscapeWithCorrectWord()
  shouldThrowExceptionForIncorrectEscapeWord()
  shouldProcessEscapeAttemptSuccessfully()
  shouldEndGameSuccessfully()
  testDiscardAfterLosing_ThrowsIfLoserNotInFight()
  testDiscardAfterLosing_ThrowsIfHandHasNoCards()
  testStealFromOtherPlayerBag_ThrowsIfWinnerNotInFight()
  testStealFromOtherPlayerHand_ThrowsIfWinnerNotInFight()
Archivo: SquareRestControllerTests.java
  setup()
  shouldReturnAllSquaresAsDTOs()
  shouldReturnSquareById()
  shouldReturnSquareByDices()
  shouldReturnNotFoundWhenSquareDoesNotExist()
Archivo: SquareServiceTests.java
  setUp()
  shouldFindSquareById()
  shouldThrowExceptionWhenSquareIdNotFound()
  shouldFindSquareByDiceValues()
  shouldThrowExceptionWhenSquareWithDiceNotFound()
  shouldFindAllSquares()
  shouldReturnSquareDTOFieldsCorrectly()
Archivo: StatisticsRestControllerTest.java
  testGetGlobalStatistics()
  testPostGlobalStatistics()
  testPutGlobalStatistics()
  testFindUserStatistics()
  testFindUserStatisticsNotFound()
  testUpdateUserStatistics()
  testCreateUserStatistics()
Archivo: StatisticsSocialServiceTest.java
  shouldCreateStatisticsForUser()
  shouldUpdateStatisticsForUser()
  shouldUpdateStatisticsForUserWithNewShortestGame()
  shouldUpdateGlobalStatistics()
Archivo: AuthoritiesServiceTests.java
  shouldFindAllAuthorities()
  shouldFindAuthoritiesByAuthority()
  shouldNotFindAuthoritiesByIncorrectAuthority()
  shouldInsertAuthorities()
Archivo: UserControllerTests.java
  setup()
  testFindAllUsers()
  testFindByUsername()
  testCreateUser()
  testUpdateUser()
  testDeleteUser()
  testMakeOnline()
  testMakeOffline()
  testClaimAchievementFailureThresholdNotMet()
  testClaimAchievementSuccess()
  shouldClaimAchievementForVictories()
  shouldNotClaimAchievementForVictoriesWhenThresholdNotMet()
  shouldClaimAchievementForDefeats()
  shouldClaimAchievementForTimePlayed()
  shouldNotClaimAchievementForTimePlayedWhenThresholdNotMet()
  shouldCountPlayers()
  shouldCountOnlinePlayers()
Archivo: UserServiceTests.java
  shouldFindCurrentUser()
  shouldNotFindCorrectCurrentUser()
  shouldFindUsersByUsername()
  shouldFindUsersByAuthority()
  shouldNotFindUserByIncorrectUsername()
  shouldFindSingleUser()
  shouldNotFindSingleUserWithBadID()
  shouldExistUser()
  shouldNotExistUser()
  shouldUpdateUser()
  shouldInsertUser()
  shouldDeleteUser()
  shouldMakeUserOnline()
  shouldMakeUserOffline()
  shouldNotSaveUserWithMissingFields()
  shouldThrowExceptionWhenSavingUserWithDuplicateUsername()
  shouldThrowExceptionWhenUpdatingNonExistentUser()
  testUserServiceExceptionsAndValidations()
  shouldReturnEmptyListForNonExistentAuthority()
  shouldAddAchievementToUser()
